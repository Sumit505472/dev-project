[
    {
      "title": "Two Sum",
      "question_number": 1,
      "difficulty": "Easy",
      "question_description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
      "input_format": "An array of integers nums and an integer target.",
      "output_format": "Indices of the two numbers such that they add up to target.",
      "tags": ["Array", "Hash Map"],
      "constraints": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
      "note": "You may not use the same element twice.",
      "sample_test_cases": [
        {
          "input": "nums = [2,7,11,15], target = 9",
          "output": "[0,1]"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "nums = [3,2,4], target = 6",
          "output": "[1,2]"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    },
    {
      "title": "Best Time to Buy and Sell Stock",
      "question_number": 2,
      "difficulty": "Easy",
      "question_description": "Given an array prices where prices[i] is the price of a given stock on the ith day, maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.",
      "input_format": "An array of integers prices.",
      "output_format": "Maximum profit achievable.",
      "tags": ["Array", "Dynamic Programming"],
      "constraints": "1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^4",
      "note": "You must buy before you sell.",
      "sample_test_cases": [
        {
          "input": "prices = [7,1,5,3,6,4]",
          "output": "5"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "prices = [7,6,4,3,1]",
          "output": "0"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    },
    {
      "title": "Contains Duplicate",
      "question_number": 3,
      "difficulty": "Easy",
      "question_description": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.",
      "input_format": "An array of integers nums.",
      "output_format": "Boolean value indicating presence of duplicates.",
      "tags": ["Array", "Hash Set"],
      "constraints": "1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9",
      "note": "",
      "sample_test_cases": [
        {
          "input": "nums = [1,2,3,1]",
          "output": "true"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "nums = [1,2,3,4]",
          "output": "false"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    },
    {
      "title": "Product of Array Except Self",
      "question_number": 4,
      "difficulty": "Medium",
      "question_description": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].",
      "input_format": "An array of integers nums.",
      "output_format": "An array where each element is the product of all elements except the one at that index.",
      "tags": ["Array", "Prefix Product"],
      "constraints": "2 <= nums.length <= 10^5\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",
      "note": "You must write an algorithm that runs in O(n) time and without using the division operation.",
      "sample_test_cases": [
        {
          "input": "nums = [1,2,3,4]",
          "output": "[24,12,8,6]"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "nums = [-1,1,0,-3,3]",
          "output": "[0,0,9,0,0]"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    },
    {
      "title": "Maximum Subarray",
      "question_number": 5,
      "difficulty": "Easy",
      "question_description": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.",
      "input_format": "An array of integers nums.",
      "output_format": "An integer representing the largest sum.",
      "tags": ["Array", "Dynamic Programming"],
      "constraints": "1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4",
      "note": "A subarray is a contiguous part of an array.",
      "sample_test_cases": [
        {
          "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
          "output": "6"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "nums = [1]",
          "output": "1"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    },
    {
      "title": "Maximum Product Subarray",
      "question_number": 6,
      "difficulty": "Medium",
      "question_description": "Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.",
      "input_format": "An array of integers nums.",
      "output_format": "An integer representing the largest product.",
      "tags": ["Array", "Dynamic Programming"],
      "constraints": "1 <= nums.length <= 10^5\n-10 <= nums[i] <= 10",
      "note": "The product of the empty subarray is undefined.",
      "sample_test_cases": [
        {
          "input": "nums = [2,3,-2,4]",
          "output": "6"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "nums = [-2,0,-1]",
          "output": "0"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    },
    {
      "title": "Find Minimum in Rotated Sorted Array",
      "question_number": 7,
      "difficulty": "Medium",
      "question_description": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. Find the minimum element.",
      "input_format": "An array of integers nums.",
      "output_format": "An integer representing the minimum element.",
      "tags": ["Array", "Binary Search"],
      "constraints": "1 <= nums.length <= 5000\n-5000 <= nums[i] <= 5000\nAll the integers of nums are unique.\nnums is guaranteed to be rotated at some pivot.",
      "note": "",
      "sample_test_cases": [
        {
          "input": "nums = [3,4,5,1,2]",
          "output": "1"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "nums = [4,5,6,7,0,1,2]",
          "output": "0"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    },
    {
      "title": "Search in Rotated Sorted Array",
      "question_number": 8,
      "difficulty": "Medium",
      "question_description": "Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.",
      "input_format": "An array of integers nums and an integer target.",
      "output_format": "Index of target in nums or -1 if not found.",
      "tags": ["Array", "Binary Search"],
      "constraints": "1 <= nums.length <= 5000\n-10^4 <= nums[i] <= 10^4\nAll values of nums are unique.\nnums is guaranteed to be rotated at some pivot.",
      "note": "You must write an algorithm with O(log n) runtime complexity.",
      "sample_test_cases": [
        {
          "input": "nums = [4,5,6,7,0,1,2], target = 0",
          "output": "4"
        }
      ],
      "hidden_test_cases": [
        {
          "input": "nums = [4,5,6,7,0,1,2], target = 3",
          "output": "-1"
        }
      ],
      "time_limit": 1,
      "memory_limit": 256
    }
]

   
  